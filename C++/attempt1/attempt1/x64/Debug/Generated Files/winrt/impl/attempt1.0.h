// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_attempt1_0_H
#define WINRT_attempt1_0_H
WINRT_EXPORT namespace winrt::attempt1
{
    struct IBlankPage;
    struct BlankPage;
}
namespace winrt::impl
{
    template <> struct category<winrt::attempt1::IBlankPage>{ using type = interface_category; };
    template <> struct category<winrt::attempt1::BlankPage>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::attempt1::BlankPage> = L"attempt1.BlankPage";
    template <> inline constexpr auto& name_v<winrt::attempt1::IBlankPage> = L"attempt1.IBlankPage";
    template <> inline constexpr guid guid_v<winrt::attempt1::IBlankPage>{ 0xED07D57C,0x5777,0x5D02,{ 0xAB,0x82,0xE3,0x10,0x03,0x87,0xA7,0xAD } }; // ED07D57C-5777-5D02-AB82-E3100387A7AD
    template <> struct default_interface<winrt::attempt1::BlankPage>{ using type = winrt::attempt1::IBlankPage; };
    template <> struct abi<winrt::attempt1::IBlankPage>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_attempt1_IBlankPage
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::attempt1::IBlankPage>
    {
        template <typename D> using type = consume_attempt1_IBlankPage<D>;
    };
}
#endif
